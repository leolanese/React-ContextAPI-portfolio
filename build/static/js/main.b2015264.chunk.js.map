{"version":3,"sources":["logo.svg","context.js","components/Contact.js","components/Contacts.js","components/About.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","Provider","dispatch","setState","axios","get","response","this","data","prevProps","prevState","snapshot","console","log","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","a","delete","json","name","className","icon","faReact","color","faAngular","faJs","faSortDown","onClick","bind","style","cursor","faTrashAlt","email","username","defaultProps","location","Contacts","Fragment","map","key","About","Header","title","to","exact","path","App","library","add","fab","fas","far","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2015264.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// store\r\nimport React, {Component} from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\n// reducer\r\nconst reducer = (state, action) => {\r\n  switch(action.type) {\r\n      case 'DELETE_CONTACT':\r\n          return {\r\n              ...state,\r\n              contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n          };\r\n          default:\r\n              return state;\r\n  }\r\n};\r\n\r\n// global state: we have a provider and we have a Consumer\r\nexport class Provider extends Component {\r\n    // state is populated from request\r\n    state = {\r\n        contacts: [\r\n            // {\r\n            //     id: 1,\r\n            //     name: 'Accuity',\r\n            //     email: 'ClientId@email.com',\r\n            //     location: 'ClientId'\r\n            // },\r\n            // {\r\n            //     id: 2,\r\n            //     name: 'Mimecast',\r\n            //     email: 'ClientId@email.com',\r\n            //     location: 'SiteCollectionTestUrl',\r\n            // },\r\n            // {\r\n            //     id: 3,\r\n            //     name: 'Tenant DomainUrl',\r\n            //     email: 'ClientId@email.com',\r\n            //     location: 'TenantDomainUrl',\r\n            // }\r\n        ],\r\n        dispatch: action => this.setState (state => reducer (state, action))\r\n    };\r\n\r\n    async componentDidMount () {\r\n        // JSONPlaceholder mock\r\n        // API calls: http.get() request make the front-end part and mocking the back end\r\n        // fetch('https://jsonplaceholder.typicode.com/users/')\r\n        //   .then(response => response.json())\r\n        //   .then(data => console.log(data))\r\n        //   .then(data => this.setState({}))\r\n        //  Using async axios request to fetch data\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users/');\r\n        this.setState({contacts: response.data})\r\n    }\r\n\r\n    componentDidUpdate (prevProps, prevState, snapshot) {\r\n        console.log('componentDidUpdate: rendering again')\r\n    }\r\n\r\n    render () {\r\n        // value that holds the State\r\n        return (\r\n          <Context.Provider value={this.state}>\r\n              {this.props.children}\r\n          </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// loading  CSS Modules\r\nimport './contact.css'\r\n\r\n// loading json\r\nimport * as json from \"./../resources/json.json\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPen, faCheck, faSortDown, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faReact, faAngular, faJs } from '@fortawesome/free-brands-svg-icons';\r\nimport { Consumer} from './../context';\r\nimport axios from 'axios';\r\n\r\n// class component\r\nclass Contact extends Component {\r\n  state = {\r\n    showContactInfo: false\r\n  };\r\n\r\n  componentDidMount () {\r\n    console.log('component did mount');\r\n  }\r\n\r\n  // custom new method()\r\n  onShowClick = (id, e) => {\r\n    // state immutable: use setState()\r\n    this.setState({showContactInfo: !this.state.showContactInfo});\r\n    console.log(id);\r\n    console.log(id);\r\n    console.log(e);\r\n    console.log(); // element\r\n  };\r\n\r\n  onDeleteClick = async (id, dispatch) => {\r\n    // JSONPlaceholder mock\r\n    // API calls: http.delete() request make the front-end part and mocking the back end\r\n    console.log('Child Contact Component > onDeleteClick');\r\n    // adding props\r\n    // this.props.deleteClickHandler();\r\n    await axios.delete(`https://jsonplaceholder.typicode.com/users/{$id}`);\r\n    dispatch({type: 'DELETE_CONTACT', payload: id});\r\n  };\r\n\r\n  render() {\r\n    console.log(`Reading JSON file: ${json[0].name}`);\r\n    // destructuring\r\n    const { contact } = this.props;\r\n    const { showContactInfo  } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n\r\n        {value => {\r\n          const {dispatch} = value;\r\n\r\n          return (\r\n            <div className=\"card card-body mb-3\" >\r\n              <FontAwesomeIcon icon={faReact} color=\"#5ed4f4\" />\r\n              <FontAwesomeIcon icon={faAngular} color=\"#b13138\" />\r\n              <FontAwesomeIcon icon={faJs} color=\"#f7df1e\" />\r\n              <h3>\r\n                {contact.name}{' '}\r\n                <FontAwesomeIcon\r\n                  icon={faSortDown}\r\n                  color=\"#000\"\r\n                  onClick={this.onShowClick.bind(this, contact.id) }\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n                <FontAwesomeIcon\r\n                  icon={faTrashAlt}\r\n                  className=\"delete-icon\"\r\n                  onClick={this.onDeleteClick.bind(this, contact.id, dispatch) }\r\n                />\r\n              </h3>\r\n              { showContactInfo ? (\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">{contact.email}</li>\r\n                  <li className=\"list-group-item\">{contact.username}</li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          )\r\n        }}\r\n\r\n      </Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nContact.defaultProps = {\r\n  name: 'Leo Lanese',\r\n  email: 'developer@leolanese.com',\r\n  location: 'London',\r\n};\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired,\r\n  // deleteClickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Contact\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact';\r\n\r\nimport { Consumer } from './../context'\r\n\r\nclass Contacts extends Component {\r\n  // local component state\r\n  // state = {\r\n  //\r\n  // };\r\n\r\n  // deleteContact = (id) => {\r\n  //   // now we have access to the parent and access to the State in the single component\r\n  //   console.log('Parent Contants Component > deleteContact');\r\n  //\r\n  //   const { contacts } = this.state;\r\n  //   const newContacts = contacts.filter(\r\n  //       contact => contact.id !== id\r\n  //   );\r\n  //   this.setState({\r\n  //     contacts: newContacts\r\n  //   });\r\n  //\r\n  // };\r\n\r\n  render() {\r\n    // destructuring: pull out date from the state\r\n    // const { contacts } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value; // State. We only take contacts\r\n          return (\r\n            // looping thougth the state\r\n            <React.Fragment>\r\n              {\r\n                contacts.map(data => (\r\n                  // Reusable Contant Component\r\n                  <Contact\r\n                    key={data.id}\r\n                    contact={data}\r\n                    // deleteClickHandler={this.deleteContact.bind(this, data.id) }\r\n                  />\r\n                ))\r\n              }\r\n            </React.Fragment>\r\n          )\r\n        }}\r\n      </Consumer>\r\n    );\r\n    console.log('Latest copy immutable State' + JSON.stringify(this.state));\r\n  }\r\n}\r\nexport default Contacts;\r\n","import React from 'react';\r\n\r\nconst About = () => (\r\n\t<div>\r\n\t\t<h2>About</h2>\r\n\t</div>\r\n);\r\n\r\nexport default About;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport Contacts from \"./Contacts\";\r\nimport About from \"./About\";\r\n\r\nconst Header = (props) => {\r\n  const { title } = props;\r\n\r\n  return (\r\n    <Router>\r\n        <nav className=\"navbar navbar-expand-sm bg-light justify-content-center mb-3 py-0\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/contacts\">Contacts</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\"  to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Route exact path=\"/contacts\" >\r\n          <Contacts />\r\n        </Route>\r\n\r\n        <Route exact path=\"/about\">\r\n          <About />\r\n        </Route>\r\n    </Router>\r\n  )\r\n};\r\n\r\nHeader.defaultProps = {\r\n  title: 'Leo Lanese - Portfolio'\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport logo from './logo.svg';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nimport Contact from './components/Contact';\nimport Contacts from './components/Contacts';\nimport Header from './components/Header';\n\nimport { Provider } from './context'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons';\n\n// App is like the meeting place for all Components\nfunction App() {\n  // Add all icons to the library so you can use it in your page\n  library.add(fab, fas, far);\n\n  return (\n    <Provider>\n      <div className=\"App\">\n\n        <Header\n          title=\"Portfolio - Leo Lanese\"\n        />\n\n        <div className=\"container\">\n          {/*<Contacts*/}\n          {/*  name=\"Leo Lanese\"*/}\n          {/*  email=\"developer@leolanese.com\"*/}\n          {/*  location=\"London\"*/}\n          {/*/>*/}\n        </div>\n\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}